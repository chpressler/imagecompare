/*
 * DockFinalDemo.java
 *
 * Created on January 6, 2007, 10:09 AM
 *
 * Copyright 2006-2007 Nigel Hughes 
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at http://www.apache.org/
 * licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language 
 * governing permissions and limitations under the License.
 */

package com.blogofbug.examples;

import com.blogofbug.swing.components.DockPanel;
import com.blogofbug.swing.components.ImageLabel;
import javax.swing.ImageIcon;

/**
 *
 * @author  nigel
 */
public class DockFinalDemo extends javax.swing.JFrame {
    DockPanel   glassPane = null;
    /** Creates new form DockFinalDemo */
    public DockFinalDemo() {
        initComponents();
        glassPane = new DockPanel(48,96);
        this.setGlassPane(glassPane);
        glassPane.setVisible(true);
        //For the demo we add a copule of items
        glassPane.addDockElement(new ImageLabel(new ImageIcon(DockFinalDemo.class.getResource("/com/blogofbug/examples/images/Acknowledgements.png")),32,32),"Thanks");
        glassPane.addDockElement(new ImageLabel(new ImageIcon(DockFinalDemo.class.getResource("/com/blogofbug/examples/images/Cascade.png")),32,32),"Drips");
        glassPane.addDockElement(new ImageLabel(new ImageIcon(DockFinalDemo.class.getResource("/com/blogofbug/examples/images/Dock.png")),32,32),"Docklets");
        glassPane.addDockElement(new ImageLabel(new ImageIcon(DockFinalDemo.class.getResource("/com/blogofbug/examples/images/Quit.png")),32,32),"Bye Byes");
        this.setSize(400,400);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        dockedTo = new javax.swing.JComboBox();
        normalSizeLabel = new javax.swing.JLabel();
        normalSize = new javax.swing.JSlider();
        enlargedSizeLabel = new javax.swing.JLabel();
        enlargedSize = new javax.swing.JSlider();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jLabel1.setText("Location in Window");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 28, 4, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        dockedTo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "South", "North", "East", "West" }));
        dockedTo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dockedToItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 28);
        getContentPane().add(dockedTo, gridBagConstraints);

        normalSizeLabel.setText("Normal Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 28, 4, 0);
        getContentPane().add(normalSizeLabel, gridBagConstraints);

        normalSize.setMajorTickSpacing(8);
        normalSize.setMaximum(128);
        normalSize.setMinimum(32);
        normalSize.setSnapToTicks(true);
        normalSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                normalSizeStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 28);
        getContentPane().add(normalSize, gridBagConstraints);

        enlargedSizeLabel.setText("Enlarged Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 28, 4, 0);
        getContentPane().add(enlargedSizeLabel, gridBagConstraints);

        enlargedSize.setMajorTickSpacing(8);
        enlargedSize.setMaximum(128);
        enlargedSize.setMinimum(32);
        enlargedSize.setSnapToTicks(true);
        enlargedSize.setValue(96);
        enlargedSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                enlargedSizeStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 28);
        getContentPane().add(enlargedSize, gridBagConstraints);

        jCheckBox1.setText("Automatically Show/Hide Dock");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckBox1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBox1StateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 65, 28);
        getContentPane().add(jCheckBox1, gridBagConstraints);

        jLabel2.setText("<html>The dock can be placed on any edge of the screen, the normal size and enlarged size can be tweaked, and finally the dock can automatically shrink when the mouse is not hovering of it.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 28, 0, 28);
        getContentPane().add(jLabel2, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBox1StateChanged
        glassPane.setAutoHiding(jCheckBox1.isSelected());
    }//GEN-LAST:event_jCheckBox1StateChanged

    private void enlargedSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_enlargedSizeStateChanged
        glassPane.setEnlargedSize(enlargedSize.getValue());
    }//GEN-LAST:event_enlargedSizeStateChanged

    private void normalSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_normalSizeStateChanged
        glassPane.setNormalSize(normalSize.getValue());
    }//GEN-LAST:event_normalSizeStateChanged

    private void dockedToItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dockedToItemStateChanged
        glassPane.setDockedTo(DockPanel.Side.valueOf(((String)dockedTo.getSelectedItem()).toUpperCase()));
    }//GEN-LAST:event_dockedToItemStateChanged
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DockFinalDemo().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox dockedTo;
    private javax.swing.JSlider enlargedSize;
    private javax.swing.JLabel enlargedSizeLabel;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSlider normalSize;
    private javax.swing.JLabel normalSizeLabel;
    // End of variables declaration//GEN-END:variables
    
}
