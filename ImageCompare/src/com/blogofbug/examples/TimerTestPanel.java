/*
 * TimerTestPanel.java
 *
 * Created on April 5, 2007, 8:34 PM
 *
 * Copyright 2006-2007 Nigel Hughes
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at http://www.apache.org/
 * licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

package com.blogofbug.examples;

import com.blogofbug.swing.SwingBugUtilities;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.LinkedList;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  nigel
 */
public class TimerTestPanel extends javax.swing.JPanel implements ActionListener{
    LinkedList<Timer> timers = new LinkedList<Timer>();
    LinkedList<ActionListener> listeners = new LinkedList<ActionListener>();
    LinkedList<Long>           lastCallAt = new LinkedList<Long>();
    
    public static final int         TIMER_DELAY = 20;
    public void resetTimers(){
        for (Timer timer : timers){
            timer.stop();
        }
        
        for (ActionListener listener : listeners){
            SwingBugUtilities.removeTimerListener(listener);
        }
        
        //Clear the table
        DefaultTableModel   model = (DefaultTableModel) timerTable.getModel();     
        while (model.getRowCount()>0){
            model.removeRow(0);
        }
       
        jScrollPane1.getViewport().setOpaque(false);
        
        //Clear the lists
        timers.clear();
        listeners.clear();
        lastCallAt.clear();
    }    
    /** Creates new form TimerTestPanel */
    public TimerTestPanel() {
        initComponents();
        
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        timerTable = new javax.swing.JTable();
        addTimer = new javax.swing.JButton();
        removeAllTimers = new javax.swing.JButton();
        swingBugTimer = new javax.swing.JCheckBox();
        swingBugTimerCount = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 2, true));
        jScrollPane1.setOpaque(false);
        timerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Number", "Delay (ms)", "Late By (ms)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        timerTable.setOpaque(false);
        timerTable.setTableHeader(null);
        jScrollPane1.setViewportView(timerTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(jScrollPane1, gridBagConstraints);

        addTimer.setText("Add Timer");
        addTimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTimerActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 5, 0);
        add(addTimer, gridBagConstraints);

        removeAllTimers.setText("Kill All");
        removeAllTimers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllTimersActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 5, 10);
        add(removeAllTimers, gridBagConstraints);

        swingBugTimer.setSelected(true);
        swingBugTimer.setText("Use swing-bug timers");
        swingBugTimer.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        swingBugTimer.setMargin(new java.awt.Insets(0, 0, 0, 0));
        swingBugTimer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                swingBugTimerItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 13, 10);
        add(swingBugTimer, gridBagConstraints);

        swingBugTimerCount.setText("Timers: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 1, 11);
        add(swingBugTimerCount, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void swingBugTimerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_swingBugTimerItemStateChanged
        int timerCount = listeners.size()+timers.size();
        resetTimers();
        for (int i=0;i<timerCount;i++){
            addTimerActionPerformed(null);
        }
    }//GEN-LAST:event_swingBugTimerItemStateChanged

    private void removeAllTimersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllTimersActionPerformed
        resetTimers();
    }//GEN-LAST:event_removeAllTimersActionPerformed

    private void addTimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTimerActionPerformed
        if (swingBugTimer.isSelected()){
            addSwingBugTimer();
        } else {
            addSwingTimer();
        }
    }//GEN-LAST:event_addTimerActionPerformed
    
    private void addSwingBugTimer(){
        final DefaultTableModel   model = (DefaultTableModel) timerTable.getModel();
        ActionListener listener = new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                int index = listeners.indexOf(this);
                if (index==0){
                    swingBugTimerCount.setText("SwingBug Timers: "+SwingBugUtilities.getTimerCount());
                }
                DefaultTableModel   model = (DefaultTableModel) timerTable.getModel();
                long lastCall = lastCallAt.get(index);
                long callInterval = System.currentTimeMillis()-lastCall;
                int lag = (int) ( callInterval - (long) TIMER_DELAY );
                if (isShowing()){
                    model.setValueAt(new Integer(lag),index,2);
                }
                lastCallAt.set(index,new Long(System.currentTimeMillis()));
            }
        };
        lastCallAt.addLast(new Long(System.currentTimeMillis()));
        listeners.addLast(listener);
        int index = listeners.indexOf(listener);
        model.addRow(new Object[] {new Integer(index),new Integer(TIMER_DELAY),new Integer(0)});

        SwingBugUtilities.addTimerListener(listener);
    }
    
    private void addSwingTimer(){
        DefaultTableModel   model = (DefaultTableModel) timerTable.getModel();
        Timer timer = new Timer(TIMER_DELAY,this);
        timer.setCoalesce(true);
        timer.setInitialDelay(TIMER_DELAY);
        timer.setDelay(TIMER_DELAY);
        timer.setRepeats(true);
        timers.addLast(timer);
        int index = timers.indexOf(timer);
        lastCallAt.addLast(new Long(System.currentTimeMillis()));
        model.addRow(new Object[] {new Integer(index),new Integer(timer.getDelay()),new Integer(0)});
        timer.start();        
    }

   public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof Timer){
            Timer timer = (Timer) e.getSource();
            int index = timers.indexOf(timer);
            if (index==0){
                swingBugTimerCount.setText("SwingBug Timers: "+SwingBugUtilities.getTimerCount());
            }
            DefaultTableModel   model = (DefaultTableModel) timerTable.getModel();
            long lastCall = lastCallAt.get(index).longValue();
            long callInterval = System.currentTimeMillis()-lastCall;
            int lag = (int) ( callInterval - (long) timer.getDelay()  );
            model.setValueAt(new Integer(lag),index,2);
            lastCallAt.set(index,new Long(System.currentTimeMillis()));
        } 
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTimer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeAllTimers;
    private javax.swing.JCheckBox swingBugTimer;
    private javax.swing.JLabel swingBugTimerCount;
    private javax.swing.JTable timerTable;
    // End of variables declaration//GEN-END:variables
    
}
