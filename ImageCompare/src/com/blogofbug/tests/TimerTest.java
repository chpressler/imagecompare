/*
 * TimerTest.java
 *
 * Created on 02 April 2007, 17:11
 */

package com.blogofbug.tests;

import com.blogofbug.swing.SwingBugUtilities;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  nhughes
 */
public class TimerTest extends javax.swing.JFrame implements ActionListener{
    LinkedList<Timer> timers = new LinkedList<Timer>();
    LinkedList<ActionListener> listeners = new LinkedList<ActionListener>();
    
    public static final int         TIMER_DELAY = 20;
    
    /** Creates new form TimerTest */
    public TimerTest() {
        initComponents();
        
        setSize(800,600);
    }
    
    public void resetTimers(){
        for (Timer timer : timers){
            timer.stop();
        }
        
        for (ActionListener listener : listeners){
            SwingBugUtilities.removeTimerListener(listener);
        }
        
        //Clear the table
        DefaultTableModel   model = (DefaultTableModel) timerTable.getModel();     
        while (model.getRowCount()>0){
            model.removeRow(0);
        }
       
        //Clear the lists
        timers.clear();
        listeners.clear();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        timerTable = new javax.swing.JTable();
        addTimer = new javax.swing.JButton();
        removeAllTimers = new javax.swing.JButton();
        swingBugTimer = new javax.swing.JCheckBox();
        swingBugTimerCount = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Timer Profiling");
        timerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Number", "Delay (ms)", "Late By (ms)", "Last Call"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(timerTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        addTimer.setText("Add Timer");
        addTimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTimerActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 5, 0);
        getContentPane().add(addTimer, gridBagConstraints);

        removeAllTimers.setText("Remove All Timers");
        removeAllTimers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllTimersActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 5, 10);
        getContentPane().add(removeAllTimers, gridBagConstraints);

        swingBugTimer.setText("Use swing-bug timers");
        swingBugTimer.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        swingBugTimer.setMargin(new java.awt.Insets(0, 0, 0, 0));
        swingBugTimer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                swingBugTimerItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 13, 10);
        getContentPane().add(swingBugTimer, gridBagConstraints);

        swingBugTimerCount.setText("SwingBug Timers: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 12, 0);
        getContentPane().add(swingBugTimerCount, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void swingBugTimerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_swingBugTimerItemStateChanged
        int timerCount = listeners.size()+timers.size();
        resetTimers();
        for (int i=0;i<timerCount;i++){
            addTimerActionPerformed(null);
        }
    }//GEN-LAST:event_swingBugTimerItemStateChanged

    private void addSwingBugTimer(){
        final DefaultTableModel   model = (DefaultTableModel) timerTable.getModel();
        ActionListener listener = new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                int index = listeners.indexOf(this);
                if (index==0){
                    swingBugTimerCount.setText("SwingBug Timers: "+SwingBugUtilities.getTimerCount());
                }
                DefaultTableModel   model = (DefaultTableModel) timerTable.getModel();
                long lastCall = ((Long)model.getValueAt(index,3)).longValue();
                long callInterval = System.currentTimeMillis()-lastCall;
                int lag = (int) ( callInterval - (long) TIMER_DELAY );
                model.setValueAt(new Integer(lag),index,2);
                model.setValueAt(new Long(System.currentTimeMillis()),index,3);                
            }
        };
        listeners.addLast(listener);
        int index = listeners.indexOf(listener);
        model.addRow(new Object[] {new Integer(index),new Integer(TIMER_DELAY),new Integer(0),new Long(System.currentTimeMillis())});

        SwingBugUtilities.addTimerListener(listener);
    }
    
    private void addSwingTimer(){
        DefaultTableModel   model = (DefaultTableModel) timerTable.getModel();
        Timer timer = new Timer(TIMER_DELAY,this);
        timer.setCoalesce(true);
        timer.setInitialDelay(TIMER_DELAY);
        timer.setDelay(TIMER_DELAY);
        timer.setRepeats(true);
        timers.addLast(timer);
        int index = timers.indexOf(timer);
        model.addRow(new Object[] {new Integer(index),new Integer(timer.getDelay()),new Integer(0),new Long(System.currentTimeMillis())});
        timer.start();        
    }
    
    private void addTimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTimerActionPerformed
        if (swingBugTimer.isSelected()){
            addSwingBugTimer();
        } else {
            addSwingTimer();
        }
    }//GEN-LAST:event_addTimerActionPerformed

    private void removeAllTimersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllTimersActionPerformed

        resetTimers();
    }//GEN-LAST:event_removeAllTimersActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TimerTest().setVisible(true);
            }
        });
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof Timer){
            Timer timer = (Timer) e.getSource();
            int index = timers.indexOf(timer);
            if (index==0){
                swingBugTimerCount.setText("SwingBug Timers: "+SwingBugUtilities.getTimerCount());
            }
            DefaultTableModel   model = (DefaultTableModel) timerTable.getModel();
            long lastCall = ((Long)model.getValueAt(index,3)).longValue();
            long callInterval = System.currentTimeMillis()-lastCall;
            int lag = (int) ( callInterval - (long) timer.getDelay()  );
            model.setValueAt(new Integer(lag),index,2);
            model.setValueAt(new Long(System.currentTimeMillis()),index,3);
        } 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTimer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeAllTimers;
    private javax.swing.JCheckBox swingBugTimer;
    private javax.swing.JLabel swingBugTimerCount;
    private javax.swing.JTable timerTable;
    // End of variables declaration//GEN-END:variables
    
}
